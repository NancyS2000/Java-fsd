package doublylinkedlist;

class Node {
    int data;
    Node prev;
    Node next;

    Node(int data) {
        this.data = data;
        this.prev = null;
        this.next = null;
    }
}

class DoublyLinkedList {
    Node head;
    Node tail;

    DoublyLinkedList() {
        head = null;
        tail = null;
    }

    // Method to insert a new element at the end of the doubly linked list
    void insert(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
        }
    }

    // Method to traverse the doubly linked list in the forward direction
    void forwardTraversal() {
        if (head == null) {
            System.out.println("The doubly linked list is empty.");
            return;
        }

        Node current = head;
        while (current != null) {
            System.out.print(current.data + " -> ");
            current = current.next;
        }
        System.out.println("null");
    }

    // Method to traverse the doubly linked list in the backward direction
    void backwardTraversal() {
        if (tail == null) {
            System.out.println("The doubly linked list is empty.");
            return;
        }

        Node current = tail;
        while (current != null) {
            System.out.print(current.data + " -> ");
            current = current.prev;
        }
        System.out.println("null");
    }
}

public class Main {
    public static void main(String[] args) {
        DoublyLinkedList list = new DoublyLinkedList();

        list.insert(1);
        list.insert(2);
        list.insert(3);
        list.insert(4);

        System.out.println("Forward traversal of the doubly linked list:");
        list.forwardTraversal();

        System.out.println("Backward traversal of the doubly linked list:");
        list.backwardTraversal();
    }
}

